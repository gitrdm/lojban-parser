Preliminary notes on using this parser, Version 3;0;00:

This parser implements the 3rd baseline as published in _The Complete
Lojban Language_.

The parser reads from standard input and writes to standard output.
These may be redirected on the command line with the usual < and > symbols.
You can also specify the input file as a single argument. If no file is
specified, and standard input is not redirected, the parser will re-execute
itself repeatedly and will process only a single line (you can break up the
single line by using backslash-newline; see below).

Command-line options:
	-d[vLRlre*]   Debug flags (combine letters):
								v=valsi, L=cpd_lex, R=cpd_reduce, l=lex, r=reduce, e=elidable, *=all
	-t            Tree output
	-s            Simple mode (flatten single-child nodes)
	-e            Elide mode (omit insertion of elidables)
	-f            Full parse (do not collapse single-child nodes)
	-p            Prolog-style output (rule/selma'o names as functors)
	-y            YAML-like output (structured listing)
	-c            Generate cmavo list and exit
	-h, --help    Show help and exit
	--version     Show version and exit

Input is preprocessed as follows:
	Upper-case letters are changed to lower-case.
	The . character is treated as a space.
	Text enclosed in slashes is ignored.
	Newlines preceded by an \ character are ignored.
	Digits are converted to the corresponding cmavo.
	All other non-alphabetic characters (note that apostrophe is
		alphabetic) are ignored.

These rules allow the re-parsing of parsed text without error.

At the end of each parse, the parser prints the space used in bytes (broken
down into token space and string space) and the time in seconds. Times are not
printed when running interactively.

Building
--------

Use make to build the parser:

	make

This produces the binary 'parser'. For a build with debug symbols and extra warnings (default), the Makefile sets -g -O0 -Wall -Wextra.

To build with AddressSanitizer for memory debugging:

	make asan

Testing output formats
----------------------

A small smoke test runs the parser over a sample file and exercises the main output modes:

	make test

It runs the following forms and prints the first few lines:

	./parser openwm.txt         # default print
	./parser -p openwm.txt      # Prolog-style output
	./parser -t openwm.txt      # tree output
	./parser -y openwm.txt      # YAML-like output

Usage examples
--------------

	./parser < textfile
	./parser -p textfile
	echo "mi klama" | ./parser -t

Troubleshooting
---------------

- If you see a segmentation fault when using -p (Prolog output), ensure you are running a build that includes fixes which avoid mutating literal strings (this README assumes you are).
- For crashes or unexpected behavior, try 'make asan' and re-run to get sanitizer diagnostics.
