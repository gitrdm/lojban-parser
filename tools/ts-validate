#!/usr/bin/env bash
set -euo pipefail
# Parse sample files with Tree-sitter and optionally diff shape vs the C parser.
# Usage: tools/ts-validate [path...]

TS_DIR="$(dirname "$0")/../external/tree-sitter-lojban"
TS_DIR="$(cd "$TS_DIR" && pwd)"

# Capture absolute paths of inputs before changing directory
FILES=()
if [ "$#" -gt 0 ]; then
  for f in "$@"; do
    # Expand globs here and resolve to absolute paths
    for p in $f; do
      if command -v python3 >/dev/null 2>&1; then
        abs="$(python3 - "$p" <<'PY'
import os,sys
p=sys.argv[1]
print(os.path.abspath(p))
PY
)"
      else
        # Fallback: prefix with current PWD
        abs="$(pwd)/$p"
      fi
      FILES+=("$abs")
    done
  done
fi

if command -v tree-sitter >/dev/null 2>&1; then
  TS=tree-sitter
elif command -v npx >/dev/null 2>&1; then
  TS="npx tree-sitter"
else
  echo "tree-sitter CLI not found; install Node.js and tree-sitter-cli" >&2
  exit 1
fi

cd "$TS_DIR"

# Ensure generated sources exist
$TS generate >/dev/null

if [ "${#FILES[@]}" -eq 0 ]; then
  echo "No inputs provided; parsing corpus samples (if any)..."
  set +e
  $TS test
  exit 0
fi

status=0
for f in "${FILES[@]}"; do
  if [ ! -f "$f" ]; then
    echo "Skip (not a file): $f" >&2
    continue
  fi
  echo "Parsing: $f"
  # tree-sitter parse prints a tree; capture nonzero on failure
  ts_tree="$($TS parse "$f" 2>/dev/null || true)"
  if [ -z "$ts_tree" ]; then
    echo "Failed to parse (TS): $f" >&2
    status=1
  else
    echo "$ts_tree"
  fi

  # If the C parser exists, run it and show a normalized shape diff
  REPO_ROOT="$(cd "$TS_DIR/../.." && pwd)"
  PARSER_C="$REPO_ROOT/parser"
  if [ -x "$PARSER_C" ] && command -v python3 >/dev/null 2>&1; then
    c_out="$("$PARSER_C" < "$f" 2>/dev/null || true)"
    if [ -n "$c_out" ]; then
      echo "--- shape diff ---"
      python3 "$REPO_ROOT/tools/ts-diff.py" "$ts_tree" "$c_out"
    fi
  fi
done

exit $status
